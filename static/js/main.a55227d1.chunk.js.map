{"version":3,"sources":["components/AppHeader/logo.svg","components/AppHeader/AppHeader.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","styled","header","Img","img","H1","h1","AppHeader","src","logo","alt","Component","TdCoinRow","td","TdCoinName","TdAction","Button","button","Coin","props","name","ticker","price","showBalance","balance","className","onClick","event","preventDefault","doCoinRefresh","doHandleTransaction","tickerId","Table","table","CoinList","classNameNot","coinData","map","key","DivAccountBalance","div","SectionAccountBalance","section","ButtonBalanceToggle","Intl","NumberFormat","style","currency","AccountBalance","btnText","btnClass","display","amount","doBalanceDisplay","doAddBalance","TICKER_URL","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","useEffect","length","selectedTicker","newCoinData","oldValue","isBuy","valueChangeId","balanceChange","values","newValues","console","log","oldBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a55227d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n    background-color: #282c34;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    color: white;\r\n`;\r\n\r\nconst Img = styled.img`\r\n    height: 8rem;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 4rem;\r\n`;\r\n\r\nexport default class AppHeader extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header>\r\n          <Img src={logo} alt=\"React logo\" />\r\n          <H1>Coin Exchange</H1>\r\n        </Header>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TdCoinRow = styled.td`\r\n    border: 1px solid #ccc;\r\n    width: 6vw;\r\n`;\r\n\r\nconst TdCoinName = styled(TdCoinRow)`\r\n    width: 16vw;\r\n`;\r\n\r\nconst TdAction = styled(TdCoinRow)`\r\n    width: 18vw;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 11px;\r\n    width: 64px;\r\n    margin: 3px 5px 0;\r\n`;\r\n\r\nexport default function Coin(props) {\r\n    const doCoinRefresh = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.doCoinRefresh(props.ticker);\r\n    }\r\n    const doCoinBuy = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.doHandleTransaction(true, props.tickerId);\r\n    }\r\n    const doCoinSell = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.doHandleTransaction(false, props.tickerId);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <TdCoinName>{props.name}</TdCoinName>\r\n            <TdCoinRow>{props.ticker}</TdCoinRow>\r\n            <TdCoinRow>${props.price}</TdCoinRow>\r\n            <TdCoinRow>{props.showBalance ? props.balance : '-'}</TdCoinRow>\r\n            <TdAction>\r\n                <Button className=\"btn btn-info\" onClick={doCoinRefresh}>Refresh</Button>\r\n                <Button className=\"btn btn-warning\" onClick={doCoinBuy}>Buy</Button>\r\n                <Button className=\"btn btn-danger\" onClick={doCoinSell}>Sell</Button>\r\n            </TdAction>\r\n        </tr>\r\n    );\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    balance: PropTypes.number.isRequired\r\n}\r\n\r\n","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n  font-size: 1rem;\r\n  background-color: #4d6088;\r\n  margin: 50px auto 50px auto;\r\n  display: inline-block;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n  return (\r\n      <Table classNameNot=\"table table-primary table-bordered\">\r\n      <thead>\r\n          <tr><th>Name</th><th>Ticker</th><th>Price</th><th>Balance</th><th>Action</th></tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.coinData.map( ({key, name, ticker, price, balance}) => \r\n            <Coin key={key} \r\n            doCoinRefresh={props.doCoinRefresh}\r\n            doHandleTransaction={props.doHandleTransaction}\r\n            showBalance={props.showBalance}\r\n            name={name} ticker={ticker} balance={balance} price={price} tickerId={key} />\r\n          )\r\n        }\r\n      </tbody>\r\n    </Table>\r\n    );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst DivAccountBalance = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst SectionAccountBalance = styled.section`\r\n    display: inline-block;\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    padding: 1rem 1rem 1.5rem 1rem;\r\n    border: 2px solid grey;\r\n`;\r\nconst Button = styled.button`\r\n    margin: 0 8px;\r\n`;\r\nconst ButtonBalanceToggle = styled(Button)`\r\n    width: 150px;\r\n`;\r\n\r\nvar formatter = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\nexport default function AccountBalance(props) {\r\n    const btnText = (props.showBalance ? 'Hide' : 'Show') + ' balance';\r\n    const btnClass = 'btn btn-' + (props.showBalance ? 'warning' : 'info'); \r\n    return (\r\n        <DivAccountBalance>\r\n            <SectionAccountBalance>\r\n                <span style={{display:props.showBalance ? 'flex' : 'none'}}>Accountbalance: ${props.amount}</span>\r\n                <ButtonBalanceToggle onClick={props.doBalanceDisplay} className={btnClass}>{btnText}</ButtonBalanceToggle>\r\n                <Button onClick={props.doAddBalance} className=\"btn btn-success\"><i className=\"fas fa-helicopter\"></i></Button>\r\n            </SectionAccountBalance>\r\n        </DivAccountBalance>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport axios from 'axios';\n\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootswatch/dist/flatly/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/js/all\";\n\nconst COIN_COUNT = 5;\nconst COINS_URL = 'https://api.coinpaprika.com/v1/coins';\nconst TICKER_URL = 'https://api.coinpaprika.com/v1/tickers/';\nconst DECIMALS = 6;\nconst formatPrice = price => parseFloat(Number(price).toFixed(DECIMALS));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get(COINS_URL);\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id );\n    const promises = coinIds.map( id => axios.get(TICKER_URL + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map( response => {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        price: formatPrice(coin.quotes['USD'].price),\n        balance: 0,        \n      };\n    });\n    setCoinData(coinPriceData);\n  }\n\n  useEffect( () => {\n    if (coinData.length === 0) {\n      // component did mount\n      componentDidMount();\n    } else {\n      // component did update\n    }\n  });\n\n  //componentDidUpdate = () => {\n  //  console.log('componentDidUpdate');\n  //}\n\n  const doCoinRefresh = async (selectedTicker) => {\n    let newCoinData = coinData;\n    for (var key in newCoinData) {\n      if (newCoinData[key].ticker === selectedTicker) {\n        const ticker = await axios.get(TICKER_URL + newCoinData[key].key);\n        newCoinData[key].price = formatPrice(ticker.data.quotes['USD'].price);\n        setCoinData(newCoinData);\n        break;\n      }\n    };\n  }\n\n  const doHandleTransaction = (isBuy, valueChangeId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map( values => {\n      let newValues = {...values};\n      if (values.key === valueChangeId) {\n        console.log(values);\n        newValues.balance += balanceChange;\n        setBalance(oldBalance => oldBalance - balanceChange * newValues.price);\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  /*doBalanceDisplay = (setBalanceDisplay) => {\n    this.setState({showBalance: setBalanceDisplay});\n  }*/\n  const doBalanceDisplay = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const doAddBalance = () => {\n    setBalance(oldValue => oldValue + 1200);\n  }\n\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <AccountBalance amount={balance} showBalance={showBalance} doBalanceDisplay={doBalanceDisplay} doAddBalance={doAddBalance} />\n      <CoinList coinData={coinData} showBalance={showBalance} doHandleTransaction={doHandleTransaction} doCoinRefresh={doCoinRefresh} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}